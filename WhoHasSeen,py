import tableauserverclient as TSC

# Define your Tableau server connection details
TABLEAU_SERVER_URL = 'https://uat.insights.citigroup.net'
SITE_ID = 'GCT'
WORKBOOK_ID = '93cba8db-8e70-483e-a666-010117f086c6'
VIEW_ID = '30b0b00b-4bfa-4e03-bc8e-9a1da19833e0'
PAT_NAME = "API_Call" # Replace with the name you created
PAT_SECRET = "sDCBtBCCQwiD2Kg0ZvVPxQ==:7fcZtHwkz6VwQtLZ0MwwRMgaXKvkAeJ4" # Replace with the secret you saved

# Use PAT for authentication
tableau_auth = TSC.PersonalAccessTokenAuth(PAT_NAME, PAT_SECRET, site_id=SITE_ID)
server = TSC.Server(TABLEAU_SERVER_URL, use_server_version=True)
server.version = '3.1'  # Specify the API version
server.add_http_options({'verify': False})  # For UAT SSL certs

try:
    print(f"Signing in to site '{SITE_ID}' on {TABLEAU_SERVER_URL}...")
    with server.auth.sign_in(tableau_auth):
        print("Sign in successful.")

        # Log the workbook ID being used
        print(f"Attempting to retrieve workbook with ID: {WORKBOOK_ID}")

        # List all workbooks to verify the workbook ID
        # all_workbooks, pagination_item = server.workbooks.get()
        # print("List of all workbooks:")
        # for workbook in all_workbooks:
        #     print(f"Workbook ID: {workbook.id}, Name: {workbook.name}")

    
        # Get the workbook by ID
        workbook = server.workbooks.get_by_id(WORKBOOK_ID)
        print(f"Workbook found: {workbook.name}")

        # Populate the views for the workbook
        server.workbooks.populate_views(workbook)

        print("List of dashboards:")
        for view in workbook.views:
            print(f"View ID: {view.id}, Name: {view.name}, URL: {view.content_url}, Owner: {view.owner_id}")

        # Get the specific view by ID
        specific_view = server.views.get_by_id(VIEW_ID)
        print(f"Specific View - Name: {specific_view.name}, URL: {specific_view.content_url}, Owner: {specific_view.owner_id}")




except TSC.ServerResponseError as e:
    print(f"An error occurred: {e}")
except Exception as e:
    print(f"An unexpected error occurred: {e}")
------------------------------
import tableauserverclient as TSC
import json
import csv

# ... [Keep your existing connection details here] ...

try:
    print(f"Signing in to site '{SITE_ID}' on {TABLEAU_SERVER_URL}...")
    with server.auth.sign_in(tableau_auth):
        print("Sign in successful.")

        # ... [Keep your existing workbook/view retrieval code] ...

        # Get usage statistics for the view
        actual_site_id = server.auth.site_id
        url = f"{server.baseurl}/api/{server.version}/sites/{actual_site_id}/views/{VIEW_ID}/usage"
        print(f"Requesting view usage data from: {url}")

        headers = {'Accept': 'application/json'}
        response = server._session.get(url, headers=headers)
        response.raise_for_status()
        usage_data = response.json()

        # Print raw JSON for inspection (optional)
        # print(json.dumps(usage_data, indent=2))

        # Convert to CSV
        csv_filename = 'view_usage.csv'
        with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
            if 'usage' in usage_data and len(usage_data['usage']) > 0:
                fieldnames = ['user_name', 'last_viewed', 'total_views']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                
                for event in usage_data['usage']:
                    user_info = event.get('user', {})
                    writer.writerow({
                        'user_name': user_info.get('name', 'Unknown'),
                        'last_viewed': event.get('lastViewedAt', ''),
                        'total_views': event.get('totalViews', 0)
                    })
                print(f"Successfully exported {len(usage_data['usage'])} records to {csv_filename}")
            else:
                print("No usage data found.")

except TSC.ServerResponseError as e:
    print(f"Tableau API error: {e}")
except Exception as e:
    print(f"General error: {e}")
--------------------------

import tableauserverclient as TSC
import csv

# Configuration
TABLEAU_SERVER_URL = 'https://uat.insights/sss.net'
SITE_ID = 'GCT'
VIEW_ID = '30b0b00b-4bfa-4e03-bc8e-9a1da19833e0'
PAT_NAME = "API_Call"
PAT_SECRET = "sXXXXXXXXXXXXXXXXXXXZ0MwXXXXXXXXXXXXXXX4"

# Set up authentication
tableau_auth = TSC.PersonalAccessTokenAuth(
    PAT_NAME,
    PAT_SECRET,
    site_id=SITE_ID
)

server = TSC.Server(TABLEAU_SERVER_URL, use_server_version=True)
server.add_http_options({'verify': False})  # Only for testing environments

try:
    print(f"Signing in to {TABLEAU_SERVER_URL}...")
    with server.auth.sign_in(tableau_auth):
        print("Authentication successful")

        # Get the view reference
        view = server.views.get_by_id(VIEW_ID)
        print(f"Accessing view: {view.name}")

        # Get view usage statistics
        usage_endpoint = f"views/{VIEW_ID}/usage"
        response = server._session.get(
            url=server.baseurl + usage_endpoint,
            headers={'Accept': 'application/json'}
        )
        response.raise_for_status()
        
        usage_data = response.json().get('usage', [])
        print(f"Found {len(usage_data)} usage records")

        # Prepare CSV output
        csv_file = 'view_usage_report.csv'
        with open(csv_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            # Write header
            writer.writerow([
                'User Name', 
                'User Email', 
                'Last Viewed', 
                'Total Views'
            ])
            
            # Write data rows
            for entry in usage_data:
                writer.writerow([
                    entry.get('user', {}).get('name', 'N/A'),
                    entry.get('user', {}).get('email', 'N/A'),
                    entry.get('lastViewedAt', 'N/A'),
                    entry.get('totalViews', 0)
                ])
        
        print(f"Successfully exported data to {csv_file}")

except TSC.ServerResponseError as e:
    print(f"Tableau API Error: {e}")
except Exception as e:
    print(f"General Error: {e}")
finally:
    if 'server' in locals() and server.auth.is_signed_in():
        server.auth.sign_out()
        print("Logged out from Tableau Server")

---------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tableau Visualization</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
    <style>
        .tab {
            display: inline-block;
            padding: 10px;
            cursor: pointer;
            background-color: #f1f1f1;
            border: 1px solid #ccc;
            margin-right: 5px;
        }
        .tab.active {
            background-color: #ccc;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <div>
        <div class="tab" id="prod-tab">PROD</div>
        <div class="tab" id="uat-tab">UAT</div>
    </div>
    <div id="prod-content" class="tab-content">
        <tableau-viz id='tableau-viz-prod' src='https://insights.citigroup.net/vizql/showadminview/views/WhoHasSeen?' width='1000' height='863' toolbar='bottom'></tableau-viz>
        <button id="save-prod-data">Save PROD Data</button>
    </div>
    <div id="uat-content" class="tab-content">
        <tableau-viz id='tableau-viz-uat' src='https://uat.insights.citigroup.net/vizql/showadminview/views/WhoHasSeen?' width='1000' height='863' toolbar='bottom'></tableau-viz>
        <button id="save-uat-data">Save UAT Data</button>
    </div>

    <script type='module' src='https://insights.citigroup.net/javascripts/api/tableau.embedding.3.latest.min.js'></script>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const prodTab = document.getElementById('prod-tab');
            const uatTab = document.getElementById('uat-tab');
            const prodContent = document.getElementById('prod-content');
            const uatContent = document.getElementById('uat-content');

            prodTab.addEventListener('click', function() {
                prodTab.classList.add('active');
                uatTab.classList.remove('active');
                prodContent.classList.add('active');
                uatContent.classList.remove('active');
            });

            uatTab.addEventListener('click', function() {
                uatTab.classList.add('active');
                prodTab.classList.remove('active');
                uatContent.classList.add('active');
                prodContent.classList.remove('active');
            });

            // Initialize Tableau visualizations
            const prodVizElement = document.getElementById('tableau-viz-prod');
            const prodVizUrl = prodVizElement.getAttribute('src');
            const prodViz = new tableau.Viz(prodVizElement, prodVizUrl, { hideTabs: true });

            const uatVizElement = document.getElementById('tableau-viz-uat');
            const uatVizUrl = uatVizElement.getAttribute('src');
            const uatViz = new tableau.Viz(uatVizElement, uatVizUrl, { hideTabs: true });

            // Set initial active tab
            prodTab.click();

            // Function to save data to Excel
            function saveDataToExcel(viz, fileName) {
                console.log("Saving data to Excel for:", fileName);
                const workbook = viz.getWorkbook();
                const activeSheet = workbook.getActiveSheet();
                activeSheet.getSummaryDataAsync().then(function(t) {
                    const data = t.getData();
                    const columns = t.getColumns();
                    
                    // Prepare data for Excel
                    const excelData = [];
                    const headers = columns.map(col => col.getFieldName());
                    excelData.push(headers);

                    data.forEach(row => {
                        const rowData = row.map(cell => cell.formattedValue);
                        excelData.push(rowData);
                    });

                    console.log("Excel data prepared:", excelData);

                    // Create a new workbook and add the data
                    const wb = XLSX.utils.book_new();
                    const ws = XLSX.utils.aoa_to_sheet(excelData);
                    XLSX.utils.book_append_sheet(wb, ws, "Sheet1");

                    // Save the workbook
                    XLSX.writeFile(wb, fileName);
                    console.log("File saved:", fileName);
                }).catch(function(error) {
                    console.error("Error getting summary data:", error);
                });
            }

            // Event listeners for saving data
            document.getElementById('save-prod-data').addEventListener('click', function() {
                saveDataToExcel(prodViz, "prod_data.xlsx");
            });

            document.getElementById('save-uat-data').addEventListener('click', function() {
                saveDataToExcel(uatViz, "uat_data.xlsx");
            });
        });
    </script>
</body>
</html>

------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tableau Visualization</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
    <style>
        .tab {
            display: inline-block;
            padding: 10px;
            cursor: pointer;
            background-color: #f1f1f1;
            border: 1px solid #ccc;
            margin-right: 5px;
        }
        .tab.active {
            background-color: #ccc;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        tableau-viz {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div>
        <div class="tab active" id="prod-tab">PROD</div>
        <div class="tab" id="uat-tab">UAT</div>
    </div>
    <div id="prod-content" class="tab-content active">
        <tableau-viz id='tableau-viz-prod' src='https://insights.citigroup.net/vizql/showadminview/views/WhoHasSeen?' toolbar='bottom'></tableau-viz>
        <button id="save-prod-data">Save PROD Data</button>
    </div>
    <div id="uat-content" class="tab-content">
        <tableau-viz id='tableau-viz-uat' src='https://uat.insights.citigroup.net/vizql/showadminview/views/WhoHasSeen?' toolbar='bottom'></tableau-viz>
        <button id="save-uat-data">Save UAT Data</button>
    </div>

    <script type='module'>
        import { Workbook } from 'https://insights.citigroup.net/javascripts/api/tableau.embedding.3.latest.min.js';

        document.addEventListener("DOMContentLoaded", async () => {
            // Tab switching functionality
            const tabs = document.querySelectorAll('.tab');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    // Remove active class from all tabs and contents
                    tabs.forEach(t => t.classList.remove('active'));
                    tabContents.forEach(c => c.classList.remove('active'));
                    
                    // Add active class to selected tab and content
                    tab.classList.add('active');
                    const contentId = tab.id.replace('-tab', '-content');
                    document.getElementById(contentId).classList.add('active');
                });
            });

            // Initialize workbooks
            let prodWorkbook, uatWorkbook;

            // Initialize PROD viz
            const prodViz = document.getElementById('tableau-viz-prod');
            prodViz.addEventListener('load', async (event) => {
                prodWorkbook = event.detail.viz.workbook;
                console.log('PROD Workbook loaded');
            });

            // Initialize UAT viz
            const uatViz = document.getElementById('tableau-viz-uat');
            uatViz.addEventListener('load', async (event) => {
                uatWorkbook = event.detail.viz.workbook;
                console.log('UAT Workbook loaded');
            });

            // Excel export function
            async function exportToExcel(workbook, fileName) {
                try {
                    const activeSheet = workbook.activeSheet;
                    if (activeSheet.sheetType === 'WORKSHEET') {
                        const dataTable = await activeSheet.getUnderlyingDataAsync();
                        const columns = dataTable.columns.map(col => col.fieldName);
                        const data = dataTable.data.map(row => 
                            row.map(cell => cell.formattedValue)
                        );

                        // Create worksheet
                        const ws = XLSX.utils.aoa_to_sheet([columns, ...data]);
                        const wb = XLSX.utils.book_new();
                        XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');
                        XLSX.writeFile(wb, fileName);
                    } else {
                        alert('Please select a worksheet to export data');
                    }
                } catch (error) {
                    console.error('Export error:', error);
                    alert('Error exporting data: ' + error.message);
                }
            }

            // Event listeners for export buttons
            document.getElementById('save-prod-data').addEventListener('click', () => {
                if (prodWorkbook) exportToExcel(prodWorkbook, 'PROD_Data.xlsx');
                else alert('PROD workbook not loaded yet');
            });

            document.getElementById('save-uat-data').addEventListener('click', () => {
                if (uatWorkbook) exportToExcel(uatWorkbook, 'UAT_Data.xlsx');
                else alert('UAT workbook not loaded yet');
            });
        });
    </script>
</body>
</html>
---------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tableau Visualization Download</title>
    <!-- No need for xlsx.js if using the API's export function -->
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script> -->
    <style>
        body { font-family: sans-serif; }
        .tab {
            display: inline-block;
            padding: 10px 15px;
            cursor: pointer;
            background-color: #f1f1f1;
            border: 1px solid #ccc;
            border-bottom: none; /* For better tab look */
            margin-right: 5px;
            border-radius: 5px 5px 0 0; /* Rounded top corners */
        }
        .tab.active {
            background-color: #fff; /* Active tab matches background */
            border-bottom: 1px solid #fff; /* Hide bottom border */
            font-weight: bold;
        }
        .tab-content {
            display: none;
            border: 1px solid #ccc;
            padding: 20px;
            border-radius: 0 5px 5px 5px; /* Rounded corners except top-left */
        }
        .tab-content.active {
            display: block;
        }
        button {
            padding: 8px 15px;
            margin-top: 15px;
            cursor: pointer;
        }
        /* Optional: Style to indicate button is disabled */
        button:disabled {
            cursor: not-allowed;
            opacity: 0.6;
        }
    </style>
</head>
<body>
    <h1>Tableau Data Export</h1>

    <div>
        <div class="tab active" id="prod-tab" data-target="prod-content" data-viz-id="tableau-viz-prod">PROD</div>
        <div class="tab" id="uat-tab" data-target="uat-content" data-viz-id="tableau-viz-uat">UAT</div>
    </div>

    <div id="prod-content" class="tab-content active">
        <h2>PROD Environment</h2>
        <p>Loading PROD Visualization...</p>
        <!-- Ensure unique IDs if you might have more embeds later -->
        <tableau-viz
            id='tableau-viz-prod'
            src='https://insights.citigroup.net/vizql/showadminview/views/WhoHasSeen?'
            width='1000' height='863'
            toolbar='bottom'
            hide-tabs>
        </tableau-viz>
        <button id="save-prod-data" disabled>Export PROD View to Excel</button>
    </div>

    <div id="uat-content" class="tab-content">
        <h2>UAT Environment</h2>
        <p>Loading UAT Visualization...</p>
        <tableau-viz
            id='tableau-viz-uat'
            src='https://uat.insights.citigroup.net/vizql/showadminview/views/WhoHasSeen?'
            width='1000' height='863'
            toolbar='bottom'
            hide-tabs>
        </tableau-viz>
        <button id="save-uat-data" disabled>Export UAT View to Excel</button>
    </div>

    <!-- Load Tableau Embedding API v3 -->
    <script type='module' src='https://insights.citigroup.net/javascripts/api/tableau.embedding.3.latest.min.js'></script>

    <script type="module">
        // Get references to elements
        const tabs = document.querySelectorAll('.tab');
        const tabContents = document.querySelectorAll('.tab-content');
        const prodVizEl = document.getElementById('tableau-viz-prod');
        const uatVizEl = document.getElementById('tableau-viz-uat');
        const prodButton = document.getElementById('save-prod-data');
        const uatButton = document.getElementById('save-uat-data');

        // --- Tab Switching Logic ---
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                // Deactivate all tabs and content
                tabs.forEach(t => t.classList.remove('active'));
                tabContents.forEach(c => c.classList.remove('active'));

                // Activate clicked tab and corresponding content
                tab.classList.add('active');
                const targetContentId = tab.getAttribute('data-target');
                document.getElementById(targetContentId).classList.add('active');

                // Optional: Re-enable the button for the now active viz,
                // but it's better to rely on the 'firstinteractive' event
                // const vizId = tab.getAttribute('data-viz-id');
                // const vizEl = document.getElementById(vizId);
                // const button = document.querySelector(`[data-viz-id="${vizId}"] ~ button`);
                // if (vizEl && vizEl.viz && button) { // Check if viz object exists
                //     button.disabled = false;
                // }
            });
        });

        // --- Tableau Viz Initialization and Export Logic ---

        // Function to handle the export action
        async function exportVizDataToExcel(vizElement, buttonElement) {
            if (!vizElement || !vizElement.viz) {
                console.error("Viz object not found for element:", vizElement.id);
                alert("Error: Visualization is not ready. Please wait and try again.");
                return;
            }

            console.log(`Attempting to export data for viz: ${vizElement.id}`);
            buttonElement.textContent = 'Exporting...'; // Provide user feedback
            buttonElement.disabled = true;

            try {
                // Use the API's built-in function to export the current sheet's crosstab data
                await vizElement.viz.exportCrossTabToExcelAsync();
                console.log(`Export successful for viz: ${vizElement.id}`);
                alert(`Data for ${vizElement.id} exported successfully! Check your browser downloads.`);
            } catch (error) {
                console.error(`Error exporting data for viz ${vizElement.id}:`, error);
                alert(`Error exporting data for ${vizElement.id}. See console for details.`);
            } finally {
                 // Reset button state regardless of success/failure
                 buttonElement.textContent = `Export ${vizElement.id.includes('prod') ? 'PROD' : 'UAT'} View to Excel`;
                 buttonElement.disabled = false;
            }
        }

        // --- Event Listeners for Viz Loading and Button Clicks ---

        // Wait for the PROD viz to be interactive, then enable its button
        prodVizEl.addEventListener('firstinteractive', (event) => {
            console.log("PROD Viz is interactive:", event.detail);
            // Remove the "Loading..." message
            const loadingMessage = prodVizEl.previousElementSibling;
             if (loadingMessage && loadingMessage.tagName === 'P') {
                 loadingMessage.style.display = 'none';
            }
            prodButton.disabled = false; // Enable the button
            // The viz object is now available at prodVizEl.viz
        });

        // Wait for the UAT viz to be interactive, then enable its button
        uatVizEl.addEventListener('firstinteractive', (event) => {
            console.log("UAT Viz is interactive:", event.detail);
             // Remove the "Loading..." message
             const loadingMessage = uatVizEl.previousElementSibling;
             if (loadingMessage && loadingMessage.tagName === 'P') {
                 loadingMessage.style.display = 'none';
            }
            uatButton.disabled = false; // Enable the button
            // The viz object is now available at uatVizEl.viz
        });

        // Add click listener for the PROD export button
        prodButton.addEventListener('click', () => {
            exportVizDataToExcel(prodVizEl, prodButton);
        });

        // Add click listener for the UAT export button
        uatButton.addEventListener('click', () => {
            exportVizDataToExcel(uatVizEl, uatButton);
        });

        // --- Initial State ---
        // No need to manually call click, the HTML sets the initial active tab.

    </script>
</body>
</html>
----------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tableau Visualization Download with Filter</title>
    <style>
        body { font-family: sans-serif; }
        .tab {
            display: inline-block; padding: 10px 15px; cursor: pointer;
            background-color: #f1f1f1; border: 1px solid #ccc;
            border-bottom: none; margin-right: 5px; border-radius: 5px 5px 0 0;
        }
        .tab.active {
            background-color: #fff; border-bottom: 1px solid #fff; font-weight: bold;
        }
        .tab-content {
            display: none; border: 1px solid #ccc; padding: 20px;
            border-radius: 0 5px 5px 5px;
        }
        .tab-content.active { display: block; }
        button { padding: 8px 15px; margin-top: 15px; cursor: pointer; }
        button:disabled { cursor: not-allowed; opacity: 0.6; }
        .loading-message { color: gray; font-style: italic; }
        .error-message { color: red; font-weight: bold; margin-top: 10px;}
    </style>
</head>
<body>
    <h1>Tableau Data Export</h1>

    <div>
        <div class="tab active" id="prod-tab" data-target="prod-content" data-viz-id="tableau-viz-prod">PROD</div>
        <div class="tab" id="uat-tab" data-target="uat-content" data-viz-id="tableau-viz-uat">UAT</div>
    </div>

    <div id="prod-content" class="tab-content active">
        <h2>PROD Environment</h2>
        <p class="loading-message" id="prod-loading">Loading PROD Visualization...</p>
        <div class="error-message" id="prod-error"></div>
        <tableau-viz
            id='tableau-viz-prod'
            src='https://insights.citigroup.net/vizql/showadminview/views/WhoHasSeen?'
            width='1000' height='863'
            toolbar='bottom'
            hide-tabs>
        </tableau-viz>
        <button id="save-prod-data" disabled>Export PROD View to Excel</button>
    </div>

    <div id="uat-content" class="tab-content">
        <h2>UAT Environment</h2>
        <p class="loading-message" id="uat-loading">Loading UAT Visualization...</p>
         <div class="error-message" id="uat-error"></div>
        <tableau-viz
            id='tableau-viz-uat'
            src='https://uat.insights.citigroup.net/vizql/showadminview/views/WhoHasSeen?'
            width='1000' height='863'
            toolbar='bottom'
            hide-tabs>
        </tableau-viz>
        <button id="save-uat-data" disabled>Export UAT View to Excel</button>
    </div>

    <!-- Load Tableau Embedding API v3 -->
    <script type='module' src='https://insights.citigroup.net/javascripts/api/tableau.embedding.3.latest.min.js'></script>

    <script type="module">
        // --- Configuration ---
        // IMPORTANT: Verify these exact names in your Tableau workbook! Case-sensitive.
        const FILTER_FIELD_NAME = 'View Name';
        const FILTER_VALUE = 'Release Pulse Dashboard';

        // --- Element References ---
        const tabs = document.querySelectorAll('.tab');
        const tabContents = document.querySelectorAll('.tab-content');
        const prodVizEl = document.getElementById('tableau-viz-prod');
        const uatVizEl = document.getElementById('tableau-viz-uat');
        const prodButton = document.getElementById('save-prod-data');
        const uatButton = document.getElementById('save-uat-data');
        const prodLoading = document.getElementById('prod-loading');
        const uatLoading = document.getElementById('uat-loading');
        const prodErrorEl = document.getElementById('prod-error');
        const uatErrorEl = document.getElementById('uat-error');

        // --- Tab Switching Logic ---
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                tabs.forEach(t => t.classList.remove('active'));
                tabContents.forEach(c => c.classList.remove('active'));
                tab.classList.add('active');
                document.getElementById(tab.getAttribute('data-target')).classList.add('active');
            });
        });

        // --- Helper Function to Apply Filter ---
        async function applyInitialFilter(vizElement, errorElement) {
            // Use a slight delay in case the sheet isn't immediately ready after 'firstinteractive'
             await new Promise(resolve => setTimeout(resolve, 500)); // 0.5 second delay

            const viz = vizElement.viz; // Get the viz object attached by the API
            if (!viz) {
                 console.error(`Filter Error: Viz object not found for ${vizElement.id} even after firstinteractive.`);
                 errorElement.textContent = `Error: Could not interact with visualization ${vizElement.id}.`;
                 return false; // Indicate failure
            }

            try {
                const workbook = viz.workbook;
                const activeSheet = workbook.activeSheet; // Assumes the URL loads the sheet you want to filter

                if (!activeSheet) {
                    console.error(`Filter Error: Could not get active sheet for ${vizElement.id}. Filtering skipped.`);
                    errorElement.textContent = `Warning: Could not find the active sheet in ${vizElement.id} to apply the filter.`;
                    return true; // Allow proceeding without filter
                }

                console.log(`Applying filter on ${vizElement.id}: Field='${FILTER_FIELD_NAME}', Value='${FILTER_VALUE}'`);
                await activeSheet.applyFilterAsync(
                    FILTER_FIELD_NAME,
                    [FILTER_VALUE], // Value MUST be in an array
                    tableau.FilterUpdateType.Replace // Replace any existing filters on this field
                );
                console.log(`Filter applied successfully for ${vizElement.id}.`);
                errorElement.textContent = ''; // Clear previous errors/warnings
                return true; // Indicate success

            } catch (filterError) {
                console.error(`Error applying filter for ${vizElement.id}:`, filterError);
                errorElement.textContent = `Error applying filter: ${filterError.message || filterError}. Export will show unfiltered data for this field.`;
                // Depending on requirements, you might want to return false here
                // and potentially disable the export button if filtering is mandatory.
                return true; // Allow proceeding even if filter fails
            }
        }


        // --- Helper Function for Export ---
        async function exportVizDataToExcel(vizElement, buttonElement, errorElement) {
            // Explicitly check for the viz object *again* right before export
            if (!vizElement || !vizElement.viz) {
                console.error(`Export Error: Viz object not found for element: ${vizElement.id}. Was firstinteractive successful?`);
                alert(`Error: Visualization ${vizElement.id} is not ready or encountered an error during loading. Please check console messages or reload.`);
                errorElement.textContent = `Error: Cannot export because visualization ${vizElement.id} failed to load correctly.`;
                buttonElement.disabled = true; // Keep disabled if it failed
                return;
            }

            console.log(`Attempting to export data for viz: ${vizElement.id}`);
            buttonElement.textContent = 'Exporting...';
            buttonElement.disabled = true;
            errorElement.textContent = ''; // Clear previous errors

            try {
                await vizElement.viz.exportCrossTabToExcelAsync();
                console.log(`Export successful for viz: ${vizElement.id}`);
                // No alert needed, browser download starts automatically
                // Optionally add a success message to the UI if desired
            } catch (error) {
                console.error(`Error exporting data for viz ${vizElement.id}:`, error);
                alert(`Error exporting data for ${vizElement.id}. See console for details. Message: ${error.message || error}`);
                errorElement.textContent = `Export failed for ${vizElement.id}: ${error.message || error}`;
            } finally {
                 buttonElement.textContent = `Export ${vizElement.id.includes('prod') ? 'PROD' : 'UAT'} View to Excel`;
                 // Re-enable button ONLY if the viz object still exists (it should, unless page was navigated away)
                 buttonElement.disabled = !vizElement.viz;
            }
        }

        // --- Event Listeners for Viz Loading and Button Clicks ---

        // PROD Viz Handling
        prodVizEl.addEventListener('firstinteractive', async (event) => {
            console.log("PROD Viz is interactive:", event.detail);
            prodLoading.style.display = 'none'; // Hide loading message
            prodErrorEl.textContent = ''; // Clear any previous errors

             // Apply the filter *after* interactive
             const filterSuccess = await applyInitialFilter(prodVizEl, prodErrorEl);

            // Enable the button only if the viz object exists
             if (prodVizEl.viz) {
                prodButton.disabled = false;
                console.log("PROD export button enabled.");
            } else {
                console.error("PROD viz object STILL not found after firstinteractive and filter attempt!");
                 prodErrorEl.textContent = 'Critical Error: PROD Visualization component failed initialization.';
                 prodButton.disabled = true; // Ensure it stays disabled
            }
        });

        // UAT Viz Handling
        uatVizEl.addEventListener('firstinteractive', async (event) => {
            console.log("UAT Viz is interactive:", event.detail);
            uatLoading.style.display = 'none';
            uatErrorEl.textContent = '';

            // Apply the filter *after* interactive
            const filterSuccess = await applyInitialFilter(uatVizEl, uatErrorEl);

            // Enable the button only if the viz object exists
             if (uatVizEl.viz) {
                 uatButton.disabled = false;
                 console.log("UAT export button enabled.");
            } else {
                console.error("UAT viz object STILL not found after firstinteractive and filter attempt!");
                 uatErrorEl.textContent = 'Critical Error: UAT Visualization component failed initialization.';
                 uatButton.disabled = true; // Ensure it stays disabled
            }
        });

        // Add error listeners (optional but helpful for debugging load issues)
        prodVizEl.addEventListener('vizloaderror', (event) => {
             console.error("PROD Viz Load Error Event:", event.detail);
             prodLoading.style.display = 'none';
             prodErrorEl.textContent = `Failed to load PROD visualization: ${event.detail.message || 'Unknown error'}. Please check permissions and network.`;
             prodButton.disabled = true;
        });
         uatVizEl.addEventListener('vizloaderror', (event) => {
             console.error("UAT Viz Load Error Event:", event.detail);
             uatLoading.style.display = 'none';
             uatErrorEl.textContent = `Failed to load UAT visualization: ${event.detail.message || 'Unknown error'}. Please check permissions and network.`;
             uatButton.disabled = true;
        });


        // Button Click Listeners
        prodButton.addEventListener('click', () => {
            exportVizDataToExcel(prodVizEl, prodButton, prodErrorEl);
        });

        uatButton.addEventListener('click', () => {
            exportVizDataToExcel(uatVizEl, uatButton, uatErrorEl);
        });

    </script>
</body>
</html>
-------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tableau Visualization Download with Filter</title>
    <style>
        body { font-family: sans-serif; margin: 20px; }
        .tab-container { margin-bottom: 10px; border-bottom: 1px solid #ccc; padding-bottom: 5px; }
        .tab {
            display: inline-block; padding: 10px 15px; cursor: pointer;
            background-color: #f1f1f1; border: 1px solid #ccc;
            border-bottom: none; margin-right: 5px; border-radius: 5px 5px 0 0;
        }
        .tab.active {
            background-color: #fff; border-bottom: 1px solid #fff; font-weight: bold;
            position: relative; top: 1px; /* Makes active tab align with content border */
        }
        .tab-content {
            display: none; border: 1px solid #ccc; padding: 20px;
            border-radius: 0 5px 5px 5px;
        }
        .tab-content.active { display: block; }
        button { padding: 8px 15px; margin-top: 15px; cursor: pointer; font-size: 1em;}
        button:disabled { cursor: not-allowed; opacity: 0.6; }
        .status-message { margin-top: 10px; padding: 10px; border-radius: 4px; }
        .loading-message { background-color: #eef; color: #339; border: 1px solid #ccf; }
        .error-message { background-color: #fee; color: #a00; border: 1px solid #fcc; font-weight: bold; }
        .error-message:empty { display: none; } /* Hide error div if empty */
        .success-message { background-color: #efe; color: #080; border: 1px solid #cfc; }
        .success-message:empty { display: none; }

    </style>
</head>
<body>
    <h1>Tableau Data Export</h1>
    <p>This page embeds Tableau views, applies a filter, and allows exporting the filtered view to Excel.</p>

    <div class="tab-container">
        <div class="tab active" id="prod-tab" data-target="prod-content" data-viz-id="tableau-viz-prod">PROD</div>
        <div class="tab" id="uat-tab" data-target="uat-content" data-viz-id="tableau-viz-uat">UAT</div>
    </div>

    <!-- PROD Content -->
    <div id="prod-content" class="tab-content active">
        <h2>PROD Environment: Who Has Seen View?</h2>
        <div class="status-message loading-message" id="prod-loading">Loading PROD Visualization...</div>
        <div class="status-message error-message" id="prod-error"></div>
        <div class="status-message success-message" id="prod-success"></div>
        <tableau-viz
            id='tableau-viz-prod'
            src='https://insights.citigroup.net/vizql/showadminview/views/WhoHasSeen?'
            width='1000' height='863'
            toolbar='bottom'
            hide-tabs>
                <!-- Optional Parameter for Authentication (if needed & supported by your setup) -->
                <!-- <viz-filter name="Username" value="SpecificUser"></viz-filter> -->
        </tableau-viz>
        <button id="save-prod-data" disabled>Export Filtered PROD View to Excel</button>
    </div>

    <!-- UAT Content -->
    <div id="uat-content" class="tab-content">
        <h2>UAT Environment: Who Has Seen View?</h2>
        <div class="status-message loading-message" id="uat-loading">Loading UAT Visualization...</div>
        <div class="status-message error-message" id="uat-error"></div>
        <div class="status-message success-message" id="uat-success"></div>
        <tableau-viz
            id='tableau-viz-uat'
            src='https://uat.insights.citigroup.net/vizql/showadminview/views/WhoHasSeen?'
            width='1000' height='863'
            toolbar='bottom'
            hide-tabs>
        </tableau-viz>
        <button id="save-uat-data" disabled>Export Filtered UAT View to Excel</button>
    </div>

    <!-- Load Tableau Embedding API v3 -->
    <script type='module' src='https://insights.citigroup.net/javascripts/api/tableau.embedding.3.latest.min.js'></script>

    <script type="module">
        // --- Configuration ---
        // IMPORTANT: Verify this exact field name in your Tableau workbook! Case-sensitive.
        const FILTER_FIELD_NAME = 'View Name';
        const FILTER_VALUE = 'Release Pulse Dashboard';

        // --- Element References ---
        const tabs = document.querySelectorAll('.tab');
        const tabContents = document.querySelectorAll('.tab-content');
        const prodVizEl = document.getElementById('tableau-viz-prod');
        const uatVizEl = document.getElementById('tableau-viz-uat');
        const prodButton = document.getElementById('save-prod-data');
        const uatButton = document.getElementById('save-uat-data');
        const prodLoading = document.getElementById('prod-loading');
        const uatLoading = document.getElementById('uat-loading');
        const prodErrorEl = document.getElementById('prod-error');
        const uatErrorEl = document.getElementById('uat-error');
        const prodSuccessEl = document.getElementById('prod-success');
        const uatSuccessEl = document.getElementById('uat-success');

        // --- Tab Switching Logic ---
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                // Deactivate all
                tabs.forEach(t => t.classList.remove('active'));
                tabContents.forEach(c => c.classList.remove('active'));
                // Activate clicked
                tab.classList.add('active');
                const targetContent = document.getElementById(tab.getAttribute('data-target'));
                 if (targetContent) {
                    targetContent.classList.add('active');
                 } else {
                    console.error("Target content not found for tab:", tab.id);
                 }
            });
        });

        // --- Helper Function to Apply Filter ---
        async function applyInitialFilter(vizElement, errorElement, successElement) {
            errorElement.textContent = ''; // Clear previous errors
            successElement.textContent = ''; // Clear previous success

            // Check if viz object exists *before* attempting filter
             if (!vizElement || !vizElement.viz) {
                 console.warn(`Filter Warning: Viz object not ready for ${vizElement.id} when attempting filter.`);
                 // Don't set error here, let firstinteractive handle the critical failure if needed
                 return false; // Indicate filter could not be applied yet
            }
            const viz = vizElement.viz;

            // Use a slight delay if necessary, but often not needed with proper checks
            // await new Promise(resolve => setTimeout(resolve, 300));

            try {
                const workbook = viz.workbook;
                const activeSheet = workbook.activeSheet;

                if (!activeSheet || !activeSheet.applyFilterAsync) { // Check if sheet and method exist
                    console.error(`Filter Error: Could not get active sheet or applyFilterAsync method for ${vizElement.id}. Filtering skipped.`);
                    errorElement.textContent = `Warning: Could not find the active sheet in ${vizElement.id} to apply filter. Check if the view loaded correctly.`;
                    return false; // Indicate failure
                }

                console.log(`Applying filter on ${vizElement.id}: Field='${FILTER_FIELD_NAME}', Value='${FILTER_VALUE}'`);
                successElement.textContent = `Applying filter: '${FILTER_VALUE}'...`; // Show applying status

                await activeSheet.applyFilterAsync(
                    FILTER_FIELD_NAME,
                    [FILTER_VALUE], // Value MUST be in an array
                    tableau.FilterUpdateType.Replace // Or .Add / .All depending on desired behavior
                );

                console.log(`Filter applied successfully for ${vizElement.id}.`);
                successElement.textContent = `Filter '${FILTER_VALUE}' applied successfully.`;
                return true; // Indicate success

            } catch (filterError) {
                console.error(`Error applying filter for ${vizElement.id}:`, filterError);
                errorElement.textContent = `Error applying filter: ${filterError.message || filterError}. Export will show unfiltered data for this field. Check if field '${FILTER_FIELD_NAME}' exists on this sheet.`;
                successElement.textContent = ''; // Clear success message on error
                return false; // Indicate failure
            }
        }


        // --- Helper Function for Export ---
        async function exportVizDataToExcel(vizElement, buttonElement, errorElement, successElement) {
            errorElement.textContent = ''; // Clear previous errors
            successElement.textContent = '';

            // Critical Check: Ensure viz object exists RIGHT BEFORE export attempt
            if (!vizElement || !vizElement.viz) {
                console.error(`Export Error: Viz object not found for element: ${vizElement.id} at time of export click.`);
                errorElement.textContent = `Error: Cannot export because visualization ${vizElement.id} is not ready or failed to load correctly. Please reload.`;
                alert(`Cannot Export: Visualization ${vizElement.id} is not ready. Please wait for it to load or reload the page.`);
                buttonElement.disabled = true; // Keep disabled if failed fundamentally
                return;
            }

            console.log(`Attempting to export data for viz: ${vizElement.id}`);
            buttonElement.textContent = 'Exporting... Please Wait';
            buttonElement.disabled = true;
            successElement.textContent = 'Preparing Excel export...';

            try {
                // exportCrossTabToExcelAsync exports the *currently active sheet*
                await vizElement.viz.exportCrossTabToExcelAsync();
                console.log(`Export command sent successfully for viz: ${vizElement.id}`);
                successElement.textContent = `Export to Excel initiated! Check your browser downloads.`;
                // No alert needed, browser handles the download.
            } catch (error) {
                console.error(`Error exporting data for viz ${vizElement.id}:`, error);
                errorElement.textContent = `Export failed for ${vizElement.id}: ${error.message || error}. Check browser console and ensure pop-ups aren't blocked.`;
                alert(`Error exporting data for ${vizElement.id}. See message on page or console for details.`);
                successElement.textContent = ''; // Clear success message on error
            } finally {
                 // Reset button state. Only re-enable if the viz object is *still* valid.
                 const vizIdName = vizElement.id.includes('prod') ? 'PROD' : 'UAT';
                 buttonElement.textContent = `Export Filtered ${vizIdName} View to Excel`;
                 buttonElement.disabled = !vizElement.viz; // Re-enable only if viz object is still there
                 // Clear the 'exporting' status message after a short delay
                 setTimeout(() => {
                    if (successElement.textContent.startsWith('Export to Excel initiated')) {
                         successElement.textContent = ''; // Clear temporary success message
                    }
                 }, 5000); // Clear after 5 seconds
            }
        }

        // --- Function to Handle Viz Initialization ---
        async function initializeViz(vizElement, loadingElement, errorElement, successElement, buttonElement) {
             console.log(`Event: firstinteractive received for ${vizElement.id}`);
             loadingElement.style.display = 'none'; // Hide loading message
             errorElement.textContent = ''; // Clear previous errors

             // CRITICAL CHECK: Confirm the .viz object is attached now
             if (!vizElement.viz) {
                 console.error(`CRITICAL ERROR: viz object NOT found on ${vizElement.id} even after firstinteractive event.`);
                 errorElement.textContent = `Critical Error: ${vizElement.id.includes('prod') ? 'PROD' : 'UAT'} Visualization component failed final initialization. Cannot interact or export. Please reload or check console.`;
                 buttonElement.disabled = true; // Ensure button stays disabled
                 return; // Stop further processing for this viz
             }

             console.log(`${vizElement.id}: Viz object found. Proceeding with filter.`);
             successElement.textContent = 'Visualization loaded. Applying initial filter...';

             // Apply the filter *after* interactive and confirming .viz exists
             const filterSuccess = await applyInitialFilter(vizElement, errorElement, successElement);

             // Enable the button now that viz is ready (even if filter failed, export might still work)
             buttonElement.disabled = false;
             console.log(`${vizElement.id} export button enabled.`);
             if (!filterSuccess && !errorElement.textContent) {
                 // If filter failed silently, add a note.
                 errorElement.textContent = "Note: Initial filter could not be applied. Export will show unfiltered data for the filtered field.";
             } else if (filterSuccess) {
                 // If filter worked, update success message
                 successElement.textContent = `Visualization ready. Filter '${FILTER_VALUE}' applied.`;
             }
        }


        // --- Event Listeners ---

        // PROD Viz Handling
        prodVizEl.addEventListener('firstinteractive', (event) => {
             initializeViz(prodVizEl, prodLoading, prodErrorEl, prodSuccessEl, prodButton);
        });
        prodVizEl.addEventListener('vizloaderror', (event) => {
             console.error("--- PROD Viz Load Error ---", event.detail);
             prodLoading.style.display = 'none';
             prodErrorEl.textContent = `Failed to load PROD visualization: ${event.detail?.message || 'Unknown error'}. Code: ${event.detail?.errorCode || 'N/A'}. Check URL, permissions, and network.`;
             prodButton.disabled = true;
             prodSuccessEl.textContent = '';
        });

        // UAT Viz Handling
        uatVizEl.addEventListener('firstinteractive', (event) => {
             initializeViz(uatVizEl, uatLoading, uatErrorEl, uatSuccessEl, uatButton);
        });
        uatVizEl.addEventListener('vizloaderror', (event) => {
             console.error("--- UAT Viz Load Error ---", event.detail);
             uatLoading.style.display = 'none';
             uatErrorEl.textContent = `Failed to load UAT visualization: ${event.detail?.message || 'Unknown error'}. Code: ${event.detail?.errorCode || 'N/A'}. Check URL, permissions, and network.`;
             uatButton.disabled = true;
             uatSuccessEl.textContent = '';
        });

        // Button Click Listeners
        prodButton.addEventListener('click', () => {
            exportVizDataToExcel(prodVizEl, prodButton, prodErrorEl, prodSuccessEl);
        });
        uatButton.addEventListener('click', () => {
            exportVizDataToExcel(uatVizEl, uatButton, uatErrorEl, uatSuccessEl);
        });

        // --- Initial Tab State (already set by 'active' class in HTML) ---
        console.log("Page script loaded. Waiting for Tableau visualizations...");

    </script>
</body>
</html>
--------------------------
---------------------------




.env File:

Create this file in the tableau_data_downloader directory to securely store your credentials.

# .env
TABLEAU_SERVER_URL_PROD=https://insights.citigroup.net/
TABLEAU_PAT_NAME_PROD=YourProdPatName
TABLEAU_PAT_SECRET_PROD=YourProdPatSecret
TABLEAU_SITE_ID_PROD="" # Usually empty string for Default site, otherwise site name/id

TABLEAU_SERVER_URL_UAT=https://uat.insights.citigroup.net/
TABLEAU_PAT_NAME_UAT=YourUatPatName
TABLEAU_PAT_SECRET_UAT=YourUatPatSecret
TABLEAU_SITE_ID_UAT="" # Usually empty string for Default site, otherwise site name/id

# --- View Details ---
# You might need to find the exact names/paths via Tableau Server UI or REST API
WORKBOOK_NAME=showadminview
VIEW_NAME=WhoHasSeen?

# --- Filter Details ---
FILTER_FIELD_NAME=View Name
FILTER_VALUE=Release Pulse Dashboard
Use code with caution.
Dotenv
4. templates/index.html File:

This is a much simpler HTML page, just providing buttons to trigger the backend download.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tableau Data Download (Python Backend)</title>
    <style>
        body { font-family: sans-serif; margin: 20px; }
        h1, h2 { margin-bottom: 15px; }
        .container { max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ccc; border-radius: 8px; }
        .button-group { margin-top: 20px; }
        button { padding: 10px 15px; font-size: 1em; cursor: pointer; margin-right: 10px; }
        .message { margin-top: 15px; padding: 10px; border-radius: 4px; }
        .error { background-color: #fee; color: #a00; border: 1px solid #fcc; }
        .info { background-color: #eef; color: #339; border: 1px solid #ccf; }
        .message:empty { display: none; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Tableau Data Download</h1>
        <p>Click a button to download the filtered data ('{{ filter_value }}') for the '{{ view_name }}' view from the specified environment.</p>

        <!-- Display messages from Flask flash -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="message {{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <div class="button-group">
            <form action="{{ url_for('download_data') }}" method="post" style="display: inline;">
                <input type="hidden" name="environment" value="prod">
                <button type="submit">Download PROD Data (Excel)</button>
            </form>
            <form action="{{ url_for('download_data') }}" method="post" style="display: inline;">
                <input type="hidden" name="environment" value="uat">
                <button type="submit">Download UAT Data (Excel)</button>
            </form>
        </div>
        <p style="margin-top: 20px; font-size: 0.9em; color: #555;">
            Note: This process connects to Tableau Server via the backend to retrieve and filter the data. You will not see the interactive visualization here.
        </p>
    </div>
</body>
</html>
Use code with caution.
Html
5. app.py File:

import os
import io
import pandas as pd
import tableauserverclient as TSC
from flask import Flask, render_template, request, Response, flash, redirect, url_for
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

app = Flask(__name__)
# Secret key needed for flashing messages
app.secret_key = os.urandom(24)

# --- Configuration from Environment Variables ---
CONFIG = {
    'prod': {
        'server_url': os.getenv('TABLEAU_SERVER_URL_PROD'),
        'pat_name': os.getenv('TABLEAU_PAT_NAME_PROD'),
        'pat_secret': os.getenv('TABLEAU_PAT_SECRET_PROD'),
        'site_id': os.getenv('TABLEAU_SITE_ID_PROD', ''), # Default to empty string if not set
    },
    'uat': {
        'server_url': os.getenv('TABLEAU_SERVER_URL_UAT'),
        'pat_name': os.getenv('TABLEAU_PAT_NAME_UAT'),
        'pat_secret': os.getenv('TABLEAU_PAT_SECRET_UAT'),
        'site_id': os.getenv('TABLEAU_SITE_ID_UAT', ''), # Default to empty string if not set
    },
    'view': {
        'workbook_name': os.getenv('WORKBOOK_NAME'),
        'view_name': os.getenv('VIEW_NAME'),
    },
    'filter': {
        'field_name': os.getenv('FILTER_FIELD_NAME'),
        'value': os.getenv('FILTER_VALUE'),
    }
}

def get_filtered_view_data(environment: str) -> pd.DataFrame | None:
    """
    Connects to Tableau Server, finds the view, applies the filter,
    and returns the data as a Pandas DataFrame.
    Returns None on error.
    """
    cfg = CONFIG.get(environment)
    view_cfg = CONFIG.get('view')
    filter_cfg = CONFIG.get('filter')

    if not all([cfg, view_cfg, filter_cfg,
                cfg.get('server_url'), cfg.get('pat_name'), cfg.get('pat_secret'),
                view_cfg.get('workbook_name'), view_cfg.get('view_name'),
                filter_cfg.get('field_name'), filter_cfg.get('value')]):
        flash(f"Configuration error for environment '{environment}'. Check .env file.", "error")
        app.logger.error(f"Configuration missing for environment '{environment}'")
        return None

    app.logger.info(f"Attempting connection to {environment.upper()} server: {cfg['server_url']}")
    tableau_auth = TSC.PersonalAccessTokenAuth(
        token_name=cfg['pat_name'],
        personal_access_token=cfg['pat_secret'],
        site_id=cfg['site_id']
    )
    server = TSC.Server(cfg['server_url'], use_server_version=True)
    server.auth.sign_in(tableau_auth)
    app.logger.info(f"Signed in successfully to {environment.upper()} server.")

    try:
        with server.auth.sign_in(tableau_auth):
            app.logger.info(f"Finding view: Workbook='{view_cfg['workbook_name']}', View='{view_cfg['view_name']}'")

            # Find the view
            # Note: Finding views by name can be tricky if names are not unique.
            # Using LUID is more reliable if you know it.
            req_option = TSC.RequestOptions(pagesize=1000)
            all_views, _ = server.views.get(req_option)
            target_view = None
            for view in all_views:
                 # Attempt to get workbook name (might require populating parent workbook)
                try:
                    if not view.workbook_id: continue # Skip if no workbook id
                    workbook_item = server.workbooks.get_by_id(view.workbook_id)
                    wb_name = workbook_item.name
                    # app.logger.debug(f"Checking view: {view.name} in Workbook: {wb_name}")
                    if view.name == view_cfg['view_name'] and wb_name == view_cfg['workbook_name']:
                        target_view = view
                        app.logger.info(f"Found target view: ID={target_view.id}, Name={target_view.name}")
                        break
                except Exception as wb_err:
                     app.logger.warning(f"Could not get workbook details for view {view.name}: {wb_err}")
                     continue # Skip if we can't verify the workbook

            if not target_view:
                flash(f"View '{view_cfg['view_name']}' in Workbook '{view_cfg['workbook_name']}' not found on {environment.upper()} server.", "error")
                app.logger.error(f"View not found: {view_cfg['workbook_name']}/{view_cfg['view_name']}")
                return None

            # Prepare filter options
            # Using vf_<FieldName> format for CSV export filter
            csv_req_option = TSC.CSVRequestOptions(maxage=5) # Cache results for 5 mins
            csv_req_option.vf(filter_cfg['field_name'], filter_cfg['value'])
            app.logger.info(f"Requesting CSV data for view {target_view.id} with filter: {filter_cfg['field_name']}='{filter_cfg['value']}'")

            # Get filtered data as CSV
            server.views.populate_csv(target_view, csv_req_option)

            # Decode CSV data (it's bytes) and read into Pandas DataFrame
            csv_data = b"".join([chunk for chunk in target_view.csv])
            if not csv_data:
                 flash(f"No data returned for the view '{view_cfg['view_name']}' with the specified filter on {environment.upper()}.", "info")
                 app.logger.warning("No CSV data returned from populate_csv")
                 return pd.DataFrame() # Return empty dataframe

            df = pd.read_csv(io.BytesIO(csv_data))
            app.logger.info(f"Successfully retrieved and parsed {len(df)} rows of data.")
            return df

    except TSC.ServerResponseError as e:
        flash(f"Tableau Server Error ({environment.upper()}): {e}", "error")
        app.logger.error(f"Tableau Server Error: {e}", exc_info=True)
        return None
    except Exception as e:
        flash(f"An unexpected error occurred ({environment.upper()}): {e}", "error")
        app.logger.error(f"Unexpected error: {e}", exc_info=True)
        return None
    finally:
        # Sign out (optional but good practice)
        try:
            server.auth.sign_out()
            app.logger.info(f"Signed out from {environment.upper()} server.")
        except Exception:
             app.logger.warning("Error during sign out.", exc_info=True)


@app.route('/')
def index():
    """Renders the main page."""
    return render_template('index.html',
                           view_name=CONFIG['view']['view_name'],
                           filter_value=CONFIG['filter']['value'])

@app.route('/download', methods=['POST'])
def download_data():
    """Handles the download request."""
    environment = request.form.get('environment') # 'prod' or 'uat'
    if not environment or environment not in CONFIG:
        flash("Invalid environment specified.", "error")
        return redirect(url_for('index'))

    app.logger.info(f"Download request received for environment: {environment}")
    df = get_filtered_view_data(environment)

    if df is None:
        # Error occurred, message flashed in get_filtered_view_data
        return redirect(url_for('index'))
    elif df.empty:
         # No data found, message flashed in get_filtered_view_data
         return redirect(url_for('index'))


    # --- Create Excel File in Memory ---
    try:
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='Filtered Data')
        output.seek(0)

        filename = f"{environment}_{CONFIG['view']['view_name']}_filtered_data.xlsx"
        app.logger.info(f"Prepared Excel file '{filename}' for download.")

        return Response(
            output,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            headers={'Content-Disposition': f'attachment;filename={filename}'}
        )
    except Exception as e:
         flash(f"Error generating Excel file: {e}", "error")
         app.logger.error(f"Error generating excel file: {e}", exc_info=True)
         return redirect(url_for('index'))


if __name__ == '__main__':
    # Set up basic logging
    import logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    # Run the Flask app
    # Use host='0.0.0.0' to make it accessible on your network if running in a VM/container
    app.run(debug=True, host='0.0.0.0', port=5000) # Turn debug=False for production
